# Generated by Django 3.2.8 on 2021-10-28 06:48

import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Geometry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(max_length=512)),
                ('name', models.CharField(max_length=512)),
                ('alias', models.TextField(default='', help_text='Alias of the geometry name. Use comma separator for multi alias.')),
                ('geometry', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
                ('child_of', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='geometry_child_of', to='rir_data.geometry')),
            ],
            options={
                'verbose_name_plural': 'geometries',
            },
        ),
        migrations.CreateModel(
            name='GeometryLevelName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(max_length=512, unique=True)),
                ('name', models.CharField(max_length=512)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Indicator',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512)),
                ('show_in_traffic_light', models.BooleanField(default=True, help_text='Showing this indicator on traffic light.')),
                ('aggregation_behaviour', models.CharField(choices=[('All geography required in current time window', 'All geography required in current time window'), ('Use all available populated geography in current time window', 'Use all available populated geography in current time window'), ('Most recent for each geography', 'Most recent for each geography')], default='Use all available populated geography in current time window', max_length=256)),
                ('aggregation_method', models.CharField(choices=[('Aggregate data by sum all data.', 'Aggregate data by sum all data.'), ('Aggregate data by majority data in the levels.', 'Aggregate data by majority data in the levels.')], default='Aggregate data by sum all data.', max_length=256)),
            ],
        ),
        migrations.CreateModel(
            name='IndicatorFrequency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(max_length=512, unique=True)),
                ('name', models.CharField(max_length=512)),
                ('description', models.TextField(blank=True, null=True)),
                ('frequency', models.IntegerField(help_text='Frequency in days. This is used by harvester as a frequency to get new indicator data.')),
            ],
            options={
                'verbose_name_plural': 'indicator frequencies',
            },
        ),
        migrations.CreateModel(
            name='IndicatorGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(max_length=512, unique=True)),
                ('name', models.CharField(max_length=512)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Instance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(max_length=512, unique=True)),
                ('name', models.CharField(max_length=512)),
                ('description', models.TextField(blank=True, null=True)),
                ('icon', models.FileField(blank=True, null=True, upload_to='instance/icons')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='IndicatorValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(help_text='The date of the value harvested.', verbose_name='Date')),
                ('value', models.FloatField()),
                ('geometry', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='rir_data.geometry')),
                ('indicator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rir_data.indicator')),
            ],
            options={
                'ordering': ('-date',),
                'unique_together': {('indicator', 'date', 'geometry')},
            },
        ),
        migrations.AddField(
            model_name='indicator',
            name='frequency',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='rir_data.indicatorfrequency'),
        ),
        migrations.AddField(
            model_name='indicator',
            name='geometry_reporting_level',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='rir_data.geometrylevelname'),
        ),
        migrations.AddField(
            model_name='indicator',
            name='group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='rir_data.indicatorgroup'),
        ),
        migrations.AddField(
            model_name='geometry',
            name='geometry_level',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rir_data.geometrylevelname'),
        ),
        migrations.AddField(
            model_name='geometry',
            name='instance',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rir_data.instance'),
        ),
        migrations.CreateModel(
            name='IndicatorExtraValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of attribute', max_length=100)),
                ('value', models.TextField(default=True, help_text='The value of attribute', null=True)),
                ('indicator_value', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rir_data.indicatorvalue')),
            ],
            options={
                'unique_together': {('indicator_value', 'name')},
            },
        ),
        migrations.CreateModel(
            name='GeometryLevelInstance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('instance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rir_data.instance')),
                ('level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rir_data.geometrylevelname')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='geometry_parent_level', to='rir_data.geometrylevelname')),
            ],
            options={
                'unique_together': {('instance', 'level')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='geometry',
            unique_together={('instance', 'identifier')},
        ),
    ]
